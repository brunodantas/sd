#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from graph import Graph
from graph.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void ping()')
    print('  string add_upd_vertex(i32 nome, i32 cor, string desc, double peso)')
    print('  string add_upd_edge(i32 v1, i32 v2, double peso, bool bi_flag)')
    print('  string add_upd_edge2(i32 v1, i32 v2, double peso, bool bi_flag, bool first_flag)')
    print('  string get_vertex(i32 nome)')
    print('  string get_edge(i32 v1, i32 v2)')
    print('  string del_vertex(i32 nome)')
    print('  string del_edge(i32 v1, i32 v2)')
    print('  string list_edges(i32 nome)')
    print('  string list_vertices(i32 v1, i32 v2)')
    print('  string list_neighbors(i32 nome)')
    print('  string add_edge_in(i32 v1, i32 v2, double peso, bool bi_flag)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Graph.Client(protocol)
transport.open()

if cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

elif cmd == 'add_upd_vertex':
    if len(args) != 4:
        print('add_upd_vertex requires 4 args')
        sys.exit(1)
    pp.pprint(client.add_upd_vertex(eval(args[0]), eval(args[1]), args[2], eval(args[3]),))

elif cmd == 'add_upd_edge':
    if len(args) != 4:
        print('add_upd_edge requires 4 args')
        sys.exit(1)
    pp.pprint(client.add_upd_edge(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'add_upd_edge2':
    if len(args) != 5:
        print('add_upd_edge2 requires 5 args')
        sys.exit(1)
    pp.pprint(client.add_upd_edge2(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'get_vertex':
    if len(args) != 1:
        print('get_vertex requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_vertex(eval(args[0]),))

elif cmd == 'get_edge':
    if len(args) != 2:
        print('get_edge requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_edge(eval(args[0]), eval(args[1]),))

elif cmd == 'del_vertex':
    if len(args) != 1:
        print('del_vertex requires 1 args')
        sys.exit(1)
    pp.pprint(client.del_vertex(eval(args[0]),))

elif cmd == 'del_edge':
    if len(args) != 2:
        print('del_edge requires 2 args')
        sys.exit(1)
    pp.pprint(client.del_edge(eval(args[0]), eval(args[1]),))

elif cmd == 'list_edges':
    if len(args) != 1:
        print('list_edges requires 1 args')
        sys.exit(1)
    pp.pprint(client.list_edges(eval(args[0]),))

elif cmd == 'list_vertices':
    if len(args) != 2:
        print('list_vertices requires 2 args')
        sys.exit(1)
    pp.pprint(client.list_vertices(eval(args[0]), eval(args[1]),))

elif cmd == 'list_neighbors':
    if len(args) != 1:
        print('list_neighbors requires 1 args')
        sys.exit(1)
    pp.pprint(client.list_neighbors(eval(args[0]),))

elif cmd == 'add_edge_in':
    if len(args) != 4:
        print('add_edge_in requires 4 args')
        sys.exit(1)
    pp.pprint(client.add_edge_in(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
